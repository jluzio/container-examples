package com.example.container.testcontainers.kafka

import org.apache.kafka.clients.consumer.ConsumerConfig
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.kafka.clients.producer.ProducerConfig
import org.apache.kafka.clients.producer.ProducerRecord
import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.kafka.common.serialization.StringSerializer
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.kafka.core.DefaultKafkaConsumerFactory
import org.springframework.kafka.core.DefaultKafkaProducerFactory
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.kafka.listener.ContainerProperties
import org.springframework.kafka.listener.KafkaMessageListenerContainer
import org.springframework.kafka.listener.MessageListener
import org.springframework.kafka.test.context.EmbeddedKafka
import org.springframework.kafka.test.rule.KafkaEmbedded
import org.springframework.kafka.test.utils.ContainerTestUtils
import org.springframework.kafka.test.utils.KafkaTestUtils

@SpringBootTest
@EmbeddedKafka(topics = ["test"], partitions = 1, bootstrapServersProperty = "spring.kafka.bootstrap-servers")
class KafkaEventKotlinTest {
  @Autowired
  lateinit var kafkaTemplate: KafkaTemplate<String, String>

  @Autowired
  lateinit var kafkaEmbedded: KafkaEmbedded

  @Test
  fun `test kafka event`() {
    // Set up a Kafka consumer factory
    val consumerProps = KafkaTestUtils.consumerProps("group", "false", kafkaEmbedded)
    consumerProps[ConsumerConfig.AUTO_OFFSET_RESET_CONFIG] = "earliest"
    val consumerFactory = DefaultKafkaConsumerFactory<String, String>(consumerProps, StringDeserializer(), StringDeserializer())

    // Set up a Kafka message listener container
    val containerProperties = ContainerProperties("test")
    containerProperties.ackMode = ContainerProperties.AckMode.MANUAL_IMMEDIATE
    val messageListenerContainer = KafkaMessageListenerContainer(consumerFactory, containerProperties)

    // Create a message listener to capture the Kafka event
    val latch = ContainerTestUtils.getLatchEventListener(1)
    messageListenerContainer.setupMessageListener(MessageListener<String, String> { record: ConsumerRecord<String, String> ->
      println("Received message: ${record.value()}")
      latch.countDown()
    })

    // Start the message listener container
    messageListenerContainer.start()
    ContainerTestUtils.waitForAssignment(messageListenerContainer, kafkaEmbedded.partitionsPerTopic)

    // Set up a Kafka producer factory
    val producerProps = KafkaTestUtils.producerProps(kafkaEmbedded.brokersAsString)
    producerProps[ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG] = StringSerializer::class.java
    producerProps[ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG] = StringSerializer::class.java
    val producerFactory = DefaultKafkaProducerFactory<String, String>(producerProps)

    // Send a test message to the Kafka topic
    val kafkaTemplate = KafkaTemplate<String, String>(producerFactory)
    kafkaTemplate.send(ProducerRecord("test", "key", "value")).get()

    // Wait for the message listener to receive the Kafka event
    latch.await()

    // Stop the message listener container
    messageListenerContainer.stop()

    // Assert that the message received by the message listener matches the test message sent to the Kafka topic
    assertEquals("value", latch.latchEvents[0].value())
  }
}
